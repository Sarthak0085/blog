// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum UserBlock {
  BLOCK
  UNBLOCK
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?              @map("email_verified")
  image                 String?
  password              String?
  bio                   String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  isBlocked             UserBlock              @default(UNBLOCK)
  TwoFactorConfirmation TwoFactorConfirmation?
  blogs                 Blog[]
  likes                 Like[]
  comments              Comment[]
  savedPosts            SavedPost[]
  dislikes              Dislike[]
  favourites            Favourite[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now())
  CommentLike           CommentLike[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Blog {
  id                   String      @id @default(cuid())
  title                String      @unique
  slug                 String      @unique
  content              String
  shortSummary         String
  categoryId           String
  imagePublicId        String?
  imageUrl             String
  isPinned             Boolean     @default(false)
  status               BlogStatus  @default(DRAFT)
  publishedDateAndTime DateTime?
  tags                 String[]
  read_time            Int         @default(0)
  views                Int         @default(0)
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  comments             Comment[]
  likes                Like[]
  savedPosts           SavedPost[]
  dislikes             Dislike[]
  favourites           Favourite[]

  category Category @relation(fields: [categoryId], references: [id])

  user   User?  @relation(fields: [userId], references: [id])
  userId String
}

enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIEVED
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  count     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  userId    String
  isPinned  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogs     Blog[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  isPinned  Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

model Dislike {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  isPinned  Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

model Favourite {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  isPinned  Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}

model Comment {
  id       String  @id @default(cuid())
  content  String
  userId   String
  blogId   String
  parentId String?
  isPinned Boolean @default(false)

  createdAt DateTime @default(now())

  user  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog  Blog          @relation(fields: [blogId], references: [id], onDelete: Cascade)
  likes CommentLike[]
}

model CommentLike {
  id        String  @id @default(cuid())
  userId    String
  commentId String
  user      User    @relation(fields: [userId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
}

model SavedPost {
  id        String   @id @default(cuid())
  userId    String
  blogId    String
  isPinned  Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@unique([userId, blogId])
}
